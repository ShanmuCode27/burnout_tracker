// <auto-generated />
using System;
using BurnoutTracker.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BurnoutTracker.Migrations
{
    [DbContext(typeof(BTDbContext))]
    [Migration("20250727110425_addTotalCommitsColumnToDeveloperBurnoutState")]
    partial class addTotalCommitsColumnToDeveloperBurnoutState
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BurnoutTracker.Domain.Models.Entities.DeveloperBurnoutState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("DeveloperLogin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalCommitCount")
                        .HasColumnType("int");

                    b.Property<long>("UserRepositoryConnectionId")
                        .HasColumnType("bigint");

                    b.Property<int>("WeeklyCommitCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRepositoryConnectionId");

                    b.ToTable("DeveloperBurnoutStates");
                });

            modelBuilder.Entity("BurnoutTracker.Domain.Models.Entities.RepositoryApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SupportedRepositoryId")
                        .HasColumnType("int");

                    b.Property<long>("SupportedRepositoryId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SupportedRepositoryId1");

                    b.ToTable("RepositoryApis");
                });

            modelBuilder.Entity("BurnoutTracker.Domain.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BurnoutTracker.Domain.Models.Entities.UserRepositoryConnection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AccessToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ConnectedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RepositoryUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("SupportedRepositoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SupportedRepositoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRepositoryConnections");
                });

            modelBuilder.Entity("BurnoutTracker.Domain.Models.SupportedRepository", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SupportedRepositories");
                });

            modelBuilder.Entity("BurnoutTracker.Domain.Models.Entities.DeveloperBurnoutState", b =>
                {
                    b.HasOne("BurnoutTracker.Domain.Models.Entities.UserRepositoryConnection", "UserRepositoryConnection")
                        .WithMany()
                        .HasForeignKey("UserRepositoryConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRepositoryConnection");
                });

            modelBuilder.Entity("BurnoutTracker.Domain.Models.Entities.RepositoryApi", b =>
                {
                    b.HasOne("BurnoutTracker.Domain.Models.SupportedRepository", "SupportedRepository")
                        .WithMany("Endpoints")
                        .HasForeignKey("SupportedRepositoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportedRepository");
                });

            modelBuilder.Entity("BurnoutTracker.Domain.Models.Entities.UserRepositoryConnection", b =>
                {
                    b.HasOne("BurnoutTracker.Domain.Models.SupportedRepository", "SupportedRepository")
                        .WithMany()
                        .HasForeignKey("SupportedRepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurnoutTracker.Domain.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportedRepository");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BurnoutTracker.Domain.Models.SupportedRepository", b =>
                {
                    b.Navigation("Endpoints");
                });
#pragma warning restore 612, 618
        }
    }
}
